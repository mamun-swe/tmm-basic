[{"C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\index.js":"1","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\App.js":"2","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\pages\\users\\Index.js":"3","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\pages\\users\\Edit.js":"4","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\utils\\Images.js":"5","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\utils\\api.js":"6","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\modal\\Branch.js":"7","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\modal\\Religion.js":"8","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\modal\\SocialOrder.js":"9","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\modal\\Language.js":"10","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\forms\\ProfilePictureDescription.js":"11","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\forms\\ContactInformation.js":"12","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\forms\\BasicAndLifestyle.js":"13","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\forms\\Hobbi.js":"14","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\forms\\Interests.js":"15","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\modal\\Country.js":"16","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\forms\\FavouriteMusic.js":"17","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\modal\\Hobbi.js":"18","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\modal\\Music.js":"19","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\modal\\Interest.js":"20"},{"size":160,"mtime":1611984454498,"results":"21","hashOfConfig":"22"},{"size":491,"mtime":1611984454483,"results":"23","hashOfConfig":"22"},{"size":8112,"mtime":1611984454500,"results":"24","hashOfConfig":"22"},{"size":38459,"mtime":1611984454499,"results":"25","hashOfConfig":"22"},{"size":269,"mtime":1611984454501,"results":"26","hashOfConfig":"22"},{"size":113,"mtime":1611984454502,"results":"27","hashOfConfig":"22"},{"size":6497,"mtime":1611984454494,"results":"28","hashOfConfig":"22"},{"size":2418,"mtime":1611984454496,"results":"29","hashOfConfig":"22"},{"size":4199,"mtime":1611984454497,"results":"30","hashOfConfig":"22"},{"size":2436,"mtime":1611984454495,"results":"31","hashOfConfig":"22"},{"size":4536,"mtime":1611984454492,"results":"32","hashOfConfig":"22"},{"size":13166,"mtime":1611984454490,"results":"33","hashOfConfig":"22"},{"size":15237,"mtime":1611984454490,"results":"34","hashOfConfig":"22"},{"size":5442,"mtime":1611984454491,"results":"35","hashOfConfig":"22"},{"size":4632,"mtime":1611984454492,"results":"36","hashOfConfig":"22"},{"size":2421,"mtime":1611984454494,"results":"37","hashOfConfig":"22"},{"size":4539,"mtime":1611984454491,"results":"38","hashOfConfig":"22"},{"size":2455,"mtime":1611984454494,"results":"39","hashOfConfig":"22"},{"size":2450,"mtime":1611984454496,"results":"40","hashOfConfig":"22"},{"size":2485,"mtime":1611984454495,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"qcr6mu",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\index.js",[],["86","87"],"C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\App.js",[],"C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\pages\\users\\Index.js",["88"],"import React, { createRef, useEffect, useState } from 'react'\r\nimport './style.scss'\r\nimport axios from 'axios'\r\nimport Icon from 'react-icons-kit'\r\nimport { api } from '../../utils/api'\r\nimport { Link } from 'react-router-dom'\r\nimport { useForm } from 'react-hook-form'\r\nimport { Images } from '../../utils/Images'\r\nimport Skeleton from 'react-loading-skeleton'\r\nimport { ic_create } from 'react-icons-kit/md'\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nconst Index = () => {\r\n    const refs = createRef()\r\n    const windowWidth = window.innerWidth\r\n    const { register, handleSubmit } = useForm()\r\n    const [page, setPage] = useState(0)\r\n    const [isLoading, setLoading] = useState(true)\r\n    const [users, setUsers] = useState([])\r\n    const [filteredUsers, setFilteredUsers] = useState(users)\r\n\r\n    const fakeArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\n\r\n    useEffect(() => {\r\n        fetchUsers()\r\n    }, [page])\r\n\r\n    // Fetch Users\r\n    const fetchUsers = async () => {\r\n        try {\r\n            const response = await axios.get(`${api}admin/index?_page=${page}&_limit=36`)\r\n            if (response.status === 200) {\r\n                setUsers([...users, ...response.data.users])\r\n                setFilteredUsers([...users, ...response.data.users])\r\n                setLoading(false)\r\n            }\r\n        } catch (error) {\r\n            if (error) {\r\n                console.log(error.response)\r\n            }\r\n        }\r\n    }\r\n\r\n    // Submit to filter user\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            // Find from loaded data\r\n            const result = users.filter(x => x.email.toLowerCase().includes(data.query.toLowerCase()))\r\n            if (result && result.length > 0) {\r\n                setFilteredUsers(result)\r\n            } else {\r\n\r\n                // Find from server\r\n                const serverResult = await axios.get(`${api}comments?&email=${data.query}`)\r\n                if (serverResult.status === 200 && serverResult.data) {\r\n                    setFilteredUsers(serverResult.data)\r\n                } else {\r\n                    setFilteredUsers(result)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            if (error) {\r\n                console.log(error.response)\r\n            }\r\n        }\r\n    }\r\n\r\n    // On change filter\r\n    const filterHandle = event => {\r\n        const value = event.target.value\r\n        if (!value) {\r\n            setLoading(true)\r\n            fetchUsers()\r\n        }\r\n    }\r\n\r\n    // is loading from fetch API data\r\n    if (isLoading) {\r\n        return (\r\n            <div className=\"users-index\">\r\n                <div className=\"container-fluid py-3 py-lg-4\">\r\n                    <div className=\"row\">\r\n\r\n                        {/* Search */}\r\n                        <div className=\"col-12 search-column\">\r\n                            <div className=\"card border-0\">\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        {/* Users */}\r\n                        <div className=\"col-12 px-2 profile-column\">\r\n\r\n                            {/* User Card */}\r\n                            {fakeArr.map((i) =>\r\n                                <div className=\"card border-0\" key={i}>\r\n                                    <div className=\"card-body text-center\">\r\n                                        <div className=\"photo-container rounded-circle\">\r\n                                            <Skeleton circle={true} animation={true} count={1} width={90} height={90} />\r\n                                        </div>\r\n                                        <div className=\"content-container\" ref={refs}>\r\n                                            <Skeleton className=\"mb-1\" animation={true} count={1} width={refs.innerWidth} height={28} />\r\n                                            <Skeleton animation={true} count={1} width={windowWidth > 576 ? 150 : 80} height={20} />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"users-index\">\r\n            <div className=\"container-fluid py-3 py-lg-4\">\r\n                <div className=\"row\">\r\n\r\n                    {/* Search */}\r\n                    <div className=\"col-12 search-column\">\r\n                        <div className=\"text-center\">\r\n                            <h3 className=\"mb-3\">{users.length} Users</h3>\r\n                        </div>\r\n\r\n                        <div className=\"card border-0\">\r\n                            <div className=\"d-flex\">\r\n                                <div className=\"flex-fill\">\r\n                                    <form onSubmit={handleSubmit(onSubmit)}>\r\n                                        <div className=\"form-group\">\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                name=\"query\"\r\n                                                className=\"form-control shadow-none border-0\"\r\n                                                placeholder=\"Search user by e-mail\"\r\n                                                ref={register()}\r\n                                                onChange={filterHandle}\r\n                                            />\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    {/* Users */}\r\n                    <div className=\"col-12 px-2 profile-column\">\r\n                        {/* User Card */}\r\n                        <InfiniteScroll\r\n                            dataLength={filteredUsers.length}\r\n                            next={() => setPage(page + 1)}\r\n                            hasMore={true}\r\n                        >\r\n                            {filteredUsers && filteredUsers.length > 0 ?\r\n                                filteredUsers.map((user, i) =>\r\n                                    <div className=\"card border-0\" key={i}>\r\n                                        <div className=\"card-body text-center\">\r\n                                            <div className=\"photo-container rounded-circle\">\r\n                                                <img src={Images.User} className=\"img-fluid\" alt=\"...\" />\r\n                                            </div>\r\n                                            <div className=\"content-container\">\r\n                                                <h6 className=\"text-capitalize\">{user.name ? user.name : null}</h6>\r\n                                                <p>{user.email ? user.email : null}</p>\r\n                                            </div>\r\n                                            <Link\r\n                                                to={`/users/${user.email}/edit`}\r\n                                                type=\"button\"\r\n                                                className=\"btn shadow-none rounded-circle\"\r\n                                            >\r\n                                                <Icon icon={ic_create} size={20} />\r\n                                            </Link>\r\n                                        </div>\r\n                                    </div>\r\n                                ) :\r\n\r\n                                <div className=\"text-center four-o-four py-4\">\r\n                                    <img src={Images.NoData} className=\"img-fluid\" alt=\"...\" />\r\n                                    <h5>Not data found !!</h5>\r\n                                </div>\r\n                            }\r\n                        </InfiniteScroll>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Index;","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\pages\\users\\Edit.js",["89"],"import React, { useState, useEffect } from 'react'\r\nimport './style.scss'\r\nimport axios from 'axios'\r\nimport Select from 'react-select'\r\nimport Icon from 'react-icons-kit'\r\nimport { api } from '../../utils/api'\r\nimport { toast } from 'react-toastify'\r\nimport { useForm } from 'react-hook-form'\r\nimport { Images } from '../../utils/Images'\r\nimport { ic_add } from 'react-icons-kit/md'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { Link, useParams } from 'react-router-dom'\r\n\r\nimport BranchCreateModal from '../../components/modal/Branch'\r\nimport ReligionCreateModal from '../../components/modal/Religion'\r\nimport SocialOrderCreateModal from '../../components/modal/SocialOrder'\r\nimport CountryCreateModal from '../../components/modal/Country'\r\nimport LanguageCreateModal from '../../components/modal/Language'\r\n\r\nimport PictureAndDescUpdateForm from '../../components/forms/ProfilePictureDescription'\r\nimport BasicAndLifestyleUpdateForm from '../../components/forms/BasicAndLifestyle'\r\nimport ContactInfoCreateForm from '../../components/forms/ContactInformation'\r\nimport HobbiForm from '../../components/forms/Hobbi'\r\nimport InterestForm from '../../components/forms/Interests'\r\nimport MusicForm from '../../components/forms/FavouriteMusic'\r\n\r\ntoast.configure({ autoClose: 2000 })\r\nconst Edit = () => {\r\n    const { register, handleSubmit, errors } = useForm()\r\n    const { email } = useParams()\r\n    const [isUpdate, setUpdate] = useState(false)\r\n    const [isLoading, setLoading] = useState(true)\r\n\r\n    // Input states\r\n    const [branch, setBranch] = useState({ value: null, error: null })\r\n    const [religion, setReligion] = useState({ value: null, error: null })\r\n    const [socialOrder, setSocialOrder] = useState({ value: null, error: null })\r\n    const [birthCountry, setBirthCountry] = useState({ value: null, error: null })\r\n    const [livingCountry, setLivingCountry] = useState({ value: null })\r\n    const [motherTongue, setMotherTongue] = useState({ value: null, error: null })\r\n    const [spokenLanguage, setSpokenLanguage] = useState({ value: [], error: null })\r\n    const [user, setUser] = useState({})\r\n\r\n    // Branch states\r\n    const [isBranchShow, setBranchShow] = useState(false)\r\n    const [isBranchCreated, setBranchCreated] = useState(false)\r\n    const [branchOptions, setBranchOptions] = useState([])\r\n\r\n    // Religion states\r\n    const [serverReligions, setServerReligions] = useState([])\r\n    const [religionOptions, setReligionOptions] = useState([])\r\n    const [isReligionShow, setReligionShow] = useState(false)\r\n    const [isCreateReligion, setCreateReligion] = useState(false)\r\n\r\n    // Social order states\r\n    const [isSocialOrderShow, setSocialOrderShow] = useState(false)\r\n    const [isCreateSocialOrder, setCreateSocialOrder] = useState(false)\r\n    const [socialOrderOptions, setSocialOrderOptions] = useState([])\r\n\r\n    // Country states\r\n    const [isCountryShow, setCountryShow] = useState(false)\r\n    const [isCountryCreate, setCountryCreate] = useState(false)\r\n    const [countryOptions, setCountryOptions] = useState([])\r\n\r\n    // Language states\r\n    const [isLanguageShow, setLanguageShow] = useState(false)\r\n    const [isLanguageCreated, setLanguageCreated] = useState(false)\r\n    const [languageOptions, setLanguageOptions] = useState([])\r\n\r\n    useEffect(() => {\r\n        // Fetch User\r\n        const fetchUser = async () => {\r\n            try {\r\n                const response = await axios.get(`${api}admin/show/${email}`)\r\n                if (response.status === 200) {\r\n                    setLoading(false)\r\n                    setUser(response.data.user)\r\n                    console.log(response.data.user)\r\n                }\r\n            } catch (error) {\r\n                if (error) {\r\n                    console.log(error.response)\r\n                    toast.warn(error.response.data.message)\r\n                }\r\n            }\r\n        }\r\n\r\n        fetchUser()\r\n        getReligion()\r\n        getCountry()\r\n        getBranches()\r\n        getLanguage()\r\n    }, [email])\r\n\r\n\r\n    // onChange branch\r\n    const onChangeBranch = event => setBranch({ value: event.value, error: null })\r\n\r\n    // onChange religion\r\n    const onChangeReligion = event => {\r\n        setReligion({ value: event.value, error: null })\r\n        // Find single religion\r\n        const singleReligion = serverReligions.find(religion => religion.name === event.value)\r\n        // Set to social orders\r\n        setSocialOrderOptions(singleReligion.socialOrders.map(data => ({ label: data, value: data })))\r\n    }\r\n\r\n    // OnChange social order\r\n    const onChangeSocialOrder = event => setSocialOrder({ value: event.value, error: null })\r\n\r\n    // OnChange Birth Country\r\n    const onChangeBirthCountry = event => setBirthCountry({ value: event.value, error: null })\r\n\r\n    // OnChange Living Country\r\n    const onChangeLivingCountry = event => setLivingCountry({ value: event.value, error: null })\r\n\r\n    // OnChange Mother Toungue\r\n    const onChangeMotherTongue = event => setMotherTongue({ value: event.value, error: null })\r\n\r\n    // OnChange Spoken Language\r\n    const onChangeSpokenLanguage = event => setSpokenLanguage({ value: event, error: null })\r\n\r\n\r\n    // Get Branch\r\n    const getBranches = async () => {\r\n        try {\r\n            const response = await axios.get(`${api}admin/branch`)\r\n            if (response.status === 200) {\r\n                setBranchOptions(response.data.branches.map(branch => ({ label: branch.name, value: branch._id })))\r\n            }\r\n        } catch (error) {\r\n            if (error) {\r\n                console.log(error.response)\r\n            }\r\n        }\r\n    }\r\n\r\n    // Create Branch\r\n    const createBranch = async (data) => {\r\n        try {\r\n            setBranchCreated(true)\r\n            const response = await axios.post(`${api}admin/branch`, data)\r\n            if (response.status === 201) {\r\n                getBranches()\r\n                setBranchCreated(false)\r\n                setBranchShow(false)\r\n                toast.success(response.data.message)\r\n            }\r\n        } catch (error) {\r\n            if (error) {\r\n                setBranchCreated(false)\r\n                toast.warn(error.response.data.message)\r\n            }\r\n        }\r\n    }\r\n\r\n    // Get Religion\r\n    const getReligion = async () => {\r\n        try {\r\n            const response = await axios.get(`${api}admin/religion`)\r\n            setServerReligions(response.data.religions)\r\n            setReligionOptions(response.data.religions.map(data => ({ label: data.name, value: data.name })))\r\n        } catch (error) {\r\n            if (error) {\r\n                toast.warn(error.response.data.message)\r\n            }\r\n        }\r\n    }\r\n\r\n    // Create Religion\r\n    const createReligion = async (data) => {\r\n        try {\r\n            setCreateReligion(true)\r\n            const response = await axios.post(`${api}admin/religion`, data)\r\n            if (response.status === 201) {\r\n                getReligion()\r\n                setCreateReligion(false)\r\n                setReligionShow(false)\r\n                toast.success(response.data.message)\r\n            }\r\n        } catch (error) {\r\n            if (error) {\r\n                setCreateReligion(false)\r\n                setReligionShow(false)\r\n                toast.warn(error.response.data.message)\r\n            }\r\n        }\r\n    }\r\n\r\n    // Create Social Order\r\n    const createSocialOrder = async (data) => {\r\n        try {\r\n            setCreateSocialOrder(true)\r\n            const response = await axios.post(`${api}admin/religion/socialorder`, data)\r\n            if (response.status === 201) {\r\n                getReligion()\r\n                setCreateSocialOrder(false)\r\n                setSocialOrderShow(false)\r\n                toast.success(response.data.message)\r\n            }\r\n\r\n        } catch (error) {\r\n            if (error) {\r\n                setCreateSocialOrder(false)\r\n                toast.warn(error.response.data.message)\r\n            }\r\n        }\r\n    }\r\n\r\n    // Get Country\r\n    const getCountry = async () => {\r\n        try {\r\n            const response = await axios.get(`${api}admin/country`)\r\n            if (response.status === 200) {\r\n                setCountryOptions(response.data.countries.map(country => ({ label: country.name, value: country.name })))\r\n            }\r\n        } catch (error) {\r\n            if (error) {\r\n                toast.warn(error.response.data.message)\r\n            }\r\n        }\r\n    }\r\n\r\n    // Create Country\r\n    const createCountry = async (data) => {\r\n        try {\r\n            setCountryCreate(true)\r\n            const response = await axios.post(`${api}admin/country`, data)\r\n            if (response.status === 201) {\r\n                getCountry()\r\n                setCountryCreate(false)\r\n                setCountryShow(false)\r\n                toast.success(response.data.message)\r\n            }\r\n        } catch (error) {\r\n            if (error) {\r\n                setCountryCreate(false)\r\n                toast.warn(error.response.data.message)\r\n            }\r\n        }\r\n    }\r\n\r\n    // Get Language\r\n    const getLanguage = async () => {\r\n        try {\r\n            const response = await axios.get(`${api}admin/language/index`)\r\n            if (response.status === 200) {\r\n                setLanguageOptions(response.data.languages.map(language => ({ label: language.name, value: language.name })))\r\n            }\r\n        } catch (error) {\r\n            if (error) console.log(error.response)\r\n        }\r\n    }\r\n\r\n    // Create Language\r\n    const createLanguage = async (data) => {\r\n        try {\r\n            setLanguageCreated(true)\r\n            const response = await axios.post(`${api}admin/language/store`, data)\r\n            if (response.status === 201) {\r\n                getLanguage()\r\n                setLanguageCreated(false)\r\n                setLanguageShow(false)\r\n                toast.success(response.data.message)\r\n            }\r\n        } catch (error) {\r\n            if (error) {\r\n                setLanguageCreated(false)\r\n                toast.warn(error.response.data.message)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // Submit Registration Data\r\n    const onSubmit = async (data) => {\r\n\r\n        // Check Branch\r\n        if (!branch.value) return setBranch({ error: true })\r\n\r\n        // Check Religion\r\n        if (!religion.value) return setReligion({ error: true })\r\n\r\n        // Check Social Order\r\n        if (!socialOrder.value) return setSocialOrder({ error: true })\r\n\r\n        // Check Birth Country\r\n        if (!birthCountry.value) return setBirthCountry({ error: true })\r\n\r\n        // Check Mother Toungue\r\n        if (!motherTongue.value) return setMotherTongue({ error: true })\r\n\r\n        const regData = {\r\n            ...data,\r\n            branch: branch.value,\r\n            religion: religion.value,\r\n            socialOrder: socialOrder.value,\r\n            birthCountry: birthCountry.value,\r\n            livingCountry: livingCountry.value ? livingCountry.value : null,\r\n            motherTongue: motherTongue.value,\r\n            spokenLanguage: spokenLanguage.value ? spokenLanguage.value : null\r\n        }\r\n\r\n        console.log(regData)\r\n        // setUpdate(true)\r\n        // toast.success('Successfully account updated.')\r\n    }\r\n\r\n    // if loading\r\n    if (isLoading) {\r\n        return (\r\n            <div>\r\n                <p>Loading...</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"user-edit\">\r\n            <div className=\"card\">\r\n                <div className=\"card-header bg-white p-4\">\r\n                    <div className=\"d-flex\">\r\n                        <div>\r\n                            <h4 className=\"mb-0\">User Edit</h4>\r\n                            <p className=\"mb-0\"><Link to=\"/\">Go Back</Link> to see registered users.</p>\r\n                        </div>\r\n                        <div className=\"ml-auto\">\r\n                            <img src={Images.Logo} className=\"img-fluid\" alt=\"Company logo\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card-body p-4\">\r\n\r\n                    {/* Form 1 */}\r\n                    <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                        <div className=\"row\">\r\n                            {/* Branch */}\r\n                            <div className=\"col-12 col-lg-4 ml-auto\">\r\n                                <div className=\"form-group mb-4\">\r\n                                    {branch.error ?\r\n                                        <small className=\"text-danger\">Branch is required.</small>\r\n                                        : <small>Branch</small>\r\n                                    }\r\n\r\n                                    <div className=\"d-flex\">\r\n                                        <div className=\"flex-fill\">\r\n                                            <Select\r\n                                                classNamePrefix=\"custom-select\"\r\n                                                styles={customStyles}\r\n                                                placeholder={'Select branch'}\r\n                                                components={{ DropdownIndicator: () => null, IndicatorSeparator: () => null }}\r\n                                                options={branchOptions}\r\n                                                onChange={onChangeBranch}\r\n                                            // defaultOptions={{ value: user.birthCountry, label: user.birthCountry }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"pl-2 pt-1\">\r\n                                            <button\r\n                                                type=\"button\"\r\n                                                style={customStyles.smBtn}\r\n                                                className=\"btn shadow-none rounded-circle p-1\"\r\n                                                onClick={() => setBranchShow(true)}\r\n                                            >\r\n                                                <Icon icon={ic_add} size={22} />\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n\r\n                            {/* Name */}\r\n                            <div className=\"col-12 col-lg-4\">\r\n                                <div className=\"form-group mb-4\">\r\n                                    {errors.name && errors.name.message ? (\r\n                                        <small className=\"text-danger\">{errors.name && errors.name.message}</small>\r\n                                    ) : <small>Name</small>\r\n                                    }\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        name=\"name\"\r\n                                        defaultValue={user.name ? user.name : null}\r\n                                        className={errors.name ? \"form-control shadow-none danger-border\" : \"form-control shadow-none\"}\r\n                                        placeholder=\"Your name\"\r\n                                        ref={register({\r\n                                            required: \"Name is required.\",\r\n                                            minLength: {\r\n                                                value: 5,\r\n                                                message: \"Minimun length 5 character.\"\r\n                                            }\r\n                                        })}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Phone */}\r\n                            <div className=\"col-12 col-lg-4\">\r\n                                <div className=\"form-group mb-4\">\r\n                                    {errors.phone && errors.phone.message ? (\r\n                                        <small className=\"text-danger\">{errors.phone && errors.phone.message}</small>\r\n                                    ) : <small>Phone number</small>\r\n                                    }\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        name=\"phone\"\r\n                                        defaultValue={user.phone ? user.phone : null}\r\n                                        className={errors.phone ? \"form-control shadow-none danger-border\" : \"form-control shadow-none\"}\r\n                                        placeholder=\"( 01X-XXXX-XXXX )\"\r\n                                        ref={register({\r\n                                            required: \"Phone number is required.\",\r\n                                            pattern: {\r\n                                                value: /^\\(?([0-9]{3})\\)?([0-9]{8})$/,\r\n                                                message: \"Number isn't valid.\"\r\n                                            }\r\n                                        })}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* E-mail */}\r\n                            <div className=\"col-12 col-lg-4\">\r\n                                <div className=\"form-group mb-4\">\r\n                                    <small>E-mail</small>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        disabled\r\n                                        defaultValue={user.email ? user.email : null}\r\n                                        className=\"form-control shadow-none\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Gender */}\r\n                            <div className=\"col-12 col-lg-4\">\r\n                                <div className=\"form-group mb-4\">\r\n                                    {errors.gender && errors.gender.message ? (\r\n                                        <small className=\"text-danger\">{errors.gender && errors.gender.message}</small>\r\n                                    ) : <small>Gender</small>\r\n                                    }\r\n\r\n                                    <select\r\n                                        name=\"gender\"\r\n                                        className={errors.gender ? \"form-control shadow-none danger-border\" : \"form-control shadow-none\"}\r\n                                        ref={register({\r\n                                            required: \"Gender is required.\"\r\n                                        })}\r\n                                    >\r\n                                        <option value=\"male\">Male</option>\r\n                                        <option value=\"female\">Female</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Looking For */}\r\n                            <div className=\"col-12 col-lg-4\">\r\n                                <div className=\"form-group mb-4\">\r\n                                    {errors.lookingFor && errors.lookingFor.message ? (\r\n                                        <small className=\"text-danger\">{errors.lookingFor && errors.lookingFor.message}</small>\r\n                                    ) : <small>Looking for</small>\r\n                                    }\r\n\r\n                                    <select\r\n                                        name=\"lookingFor\"\r\n                                        className={errors.lookingFor ? \"form-control shadow-none danger-border\" : \"form-control shadow-none\"}\r\n                                        ref={register({\r\n                                            required: \"Select what you want.\"\r\n                                        })}\r\n                                    >\r\n                                        <option value=\"groom\">Groom</option>\r\n                                        <option value=\"female\">Female</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* DOB */}\r\n                            <div className=\"col-12 col-lg-4\">\r\n                                <div className=\"form-group mb-4\">\r\n                                    {errors.dob && errors.dob.message ? (\r\n                                        <small className=\"text-danger\">{errors.dob && errors.dob.message}</small>\r\n                                    ) : <small>Date of birth</small>\r\n                                    }\r\n\r\n                                    <input\r\n                                        type=\"date\"\r\n                                        name=\"dob\"\r\n                                        className={errors.dob ? \"form-control shadow-none danger-border\" : \"form-control shadow-none\"}\r\n                                        ref={register({\r\n                                            required: \"Date of birth is required\"\r\n                                        })}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Religion */}\r\n                            <div className=\"col-12 col-lg-4\">\r\n\r\n                                <div className=\"form-group mb-4\">\r\n                                    {religion.error ?\r\n                                        <small className=\"text-danger\">Religion is required.</small>\r\n                                        : <small>Religion</small>\r\n                                    }\r\n\r\n                                    <div className=\"d-flex\">\r\n                                        <div className=\"flex-fill\">\r\n                                            <Select\r\n                                                classNamePrefix=\"custom-select\"\r\n                                                styles={customStyles}\r\n                                                placeholder={'Select religion'}\r\n                                                components={{ DropdownIndicator: () => null, IndicatorSeparator: () => null }}\r\n                                                options={religionOptions}\r\n                                                onChange={onChangeReligion}\r\n                                            // defaultOptions={{ value: user.religion, label: user.religion }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"pl-2 pt-1\">\r\n                                            <button\r\n                                                type=\"button\"\r\n                                                style={customStyles.smBtn}\r\n                                                className=\"btn shadow-none rounded-circle p-1\"\r\n                                                onClick={() => setReligionShow(true)}\r\n                                            >\r\n                                                <Icon icon={ic_add} size={22} />\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Social order */}\r\n                            <div className=\"col-12 col-lg-4\">\r\n                                <div className=\"form-group mb-4\">\r\n                                    {socialOrder.error ?\r\n                                        <small className=\"text-danger\">Social order is required.</small>\r\n                                        : <small>Social order</small>\r\n                                    }\r\n\r\n                                    <div className=\"d-flex\">\r\n                                        <div className=\"flex-fill\">\r\n                                            <Select\r\n                                                classNamePrefix=\"custom-select\"\r\n                                                styles={customStyles}\r\n                                                placeholder={'Social order'}\r\n                                                components={{ DropdownIndicator: () => null, IndicatorSeparator: () => null }}\r\n                                                options={socialOrderOptions}\r\n                                                onChange={onChangeSocialOrder}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"pl-2 pt-1\">\r\n                                            <button\r\n                                                type=\"button\"\r\n                                                style={customStyles.smBtn}\r\n                                                className=\"btn shadow-none rounded-circle p-1\"\r\n                                                onClick={() => setSocialOrderShow(true)}\r\n                                            >\r\n                                                <Icon icon={ic_add} size={22} />\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Birth Country */}\r\n                            <div className=\"col-12 col-lg-4\">\r\n                                <div className=\"form-group mb-4\">\r\n                                    {birthCountry.error ?\r\n                                        <small className=\"text-danger\">Birth country is required.</small>\r\n                                        : <small>Birth country</small>\r\n                                    }\r\n\r\n                                    <div className=\"d-flex\">\r\n                                        <div className=\"flex-fill\">\r\n                                            <Select\r\n                                                classNamePrefix=\"custom-select\"\r\n                                                styles={customStyles}\r\n                                                placeholder={'Select birth country'}\r\n                                                components={{ DropdownIndicator: () => null, IndicatorSeparator: () => null }}\r\n                                                options={countryOptions}\r\n                                                onChange={onChangeBirthCountry}\r\n                                                defaultOptions={{ value: user.birthCountry, label: user.birthCountry }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"pl-2 pt-1\">\r\n                                            <button\r\n                                                type=\"button\"\r\n                                                style={customStyles.smBtn}\r\n                                                className=\"btn shadow-none rounded-circle p-1\"\r\n                                                onClick={() => setCountryShow(true)}\r\n                                            >\r\n                                                <Icon icon={ic_add} size={22} />\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Living Country */}\r\n                            <div className=\"col-12 col-lg-4\">\r\n                                <div className=\"form-group mb-4\">\r\n                                    <small>Living country</small>\r\n\r\n                                    <div className=\"d-flex\">\r\n                                        <div className=\"flex-fill\">\r\n                                            <Select\r\n                                                classNamePrefix=\"custom-select\"\r\n                                                styles={customStyles}\r\n                                                placeholder={'Social order'}\r\n                                                components={{ DropdownIndicator: () => null, IndicatorSeparator: () => null }}\r\n                                                options={countryOptions}\r\n                                                onChange={onChangeLivingCountry}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"pl-2 pt-1\">\r\n                                            <button\r\n                                                type=\"button\"\r\n                                                style={customStyles.smBtn}\r\n                                                className=\"btn shadow-none rounded-circle p-1\"\r\n                                                onClick={() => setCountryShow(true)}\r\n                                            >\r\n                                                <Icon icon={ic_add} size={22} />\r\n                                            </button>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Mother tounge  */}\r\n                            <div className=\"col-12 col-lg-4\">\r\n                                <div className=\"form-group mb-4\">\r\n                                    {motherTongue.error ?\r\n                                        <small className=\"text-danger\">Mother toungue is required.</small>\r\n                                        : <small>Mother tounge</small>\r\n                                    }\r\n\r\n                                    <div className=\"d-flex\">\r\n                                        <div className=\"flex-fill\">\r\n                                            <Select\r\n                                                classNamePrefix=\"custom-select\"\r\n                                                styles={customStyles}\r\n                                                placeholder={'Select mother tounge'}\r\n                                                components={{ DropdownIndicator: () => null, IndicatorSeparator: () => null }}\r\n                                                options={languageOptions}\r\n                                                onChange={onChangeMotherTongue}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"pl-2 pt-1\">\r\n                                            <button\r\n                                                type=\"button\"\r\n                                                style={customStyles.smBtn}\r\n                                                className=\"btn shadow-none rounded-circle p-1\"\r\n                                                onClick={() => setLanguageShow(true)}\r\n                                            >\r\n                                                <Icon icon={ic_add} size={22} />\r\n                                            </button>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Spoken language  */}\r\n                            <div className=\"col-12 col-lg-4\">\r\n                                <div className=\"form-group mb-4\">\r\n                                    <small>Spoken language</small>\r\n\r\n                                    <div className=\"d-flex\">\r\n                                        <div className=\"flex-fill\">\r\n                                            <Select\r\n                                                isMulti\r\n                                                styles={customStyles}\r\n                                                classNamePrefix=\"custom-select\"\r\n                                                placeholder={'Select spoken language'}\r\n                                                components={{ DropdownIndicator: () => null, IndicatorSeparator: () => null }}\r\n                                                options={languageOptions}\r\n                                                onChange={onChangeSpokenLanguage}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"pl-2 pt-1\">\r\n                                            <button\r\n                                                type=\"button\"\r\n                                                style={customStyles.smBtn}\r\n                                                className=\"btn shadow-none rounded-circle p-1\"\r\n                                                onClick={() => setLanguageShow(true)}\r\n                                            >\r\n                                                <Icon icon={ic_add} size={22} />\r\n                                            </button>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        {/* Submit Button */}\r\n                        <div className=\"text-right\">\r\n                            <button\r\n                                type=\"submit\"\r\n                                className=\"btn shadow-none\"\r\n                                disabled={isUpdate}\r\n                            >\r\n                                {isUpdate ? <span>Updating...</span> : <span>Update</span>}\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n\r\n                </div>\r\n            </div>\r\n\r\n            {/* Profile Picture & Description form */}\r\n            <PictureAndDescUpdateForm email={email} />\r\n\r\n            {/* Basic and lifestyle information form */}\r\n            <BasicAndLifestyleUpdateForm email={email} basicandlifeinfo={user.basicAndLifestyleInformation ? user.basicAndLifestyleInformation : null} />\r\n\r\n            {/* Contact information form */}\r\n            <ContactInfoCreateForm email={email} contact={user.contactInformation ? user.contactInformation : null} />\r\n\r\n            {/* Personal activities */}\r\n            <div className=\"card my-lg-4\">\r\n                <div className=\"card-header bg-white\">\r\n                    <h6 className=\"mb-0\">Personal Activities</h6>\r\n                </div>\r\n                <div className=\"card-body p-4\">\r\n                    <div className=\"row\">\r\n\r\n                        {/* Hobbi create form */}\r\n                        <div className=\"col-12 col-lg-6 pr-lg-4 border-bottom pb-4 mb-4\">\r\n                            <HobbiForm email={email} />\r\n                        </div>\r\n\r\n                        {/* Interests create form */}\r\n                        <div className=\"col-12 col-lg-6 pl-lg-4 border-bottom pb-4 mb-4\">\r\n                            <InterestForm email={email} />\r\n                        </div>\r\n\r\n                        {/* Music create form */}\r\n                        <div className=\"col-12 col-lg-6 pl-lg-4 border-bottom pb-4 mb-4\">\r\n                            <MusicForm email={email} />\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n            {/* Modals */}\r\n\r\n            {/* Branch create modal */}\r\n            {isBranchShow ?\r\n                <BranchCreateModal\r\n                    show={isBranchShow}\r\n                    newdata={createBranch}\r\n                    countries={countryOptions}\r\n                    isCreate={isBranchCreated}\r\n                    onHide={() => setBranchShow(false)}\r\n                />\r\n                : null}\r\n\r\n            {/* Religion create modal */}\r\n            {isReligionShow ?\r\n                <ReligionCreateModal\r\n                    show={isReligionShow}\r\n                    newdata={createReligion}\r\n                    isCreate={isCreateReligion}\r\n                    onHide={() => setReligionShow(false)}\r\n                />\r\n                : null}\r\n\r\n            {/* Social order create modal */}\r\n            {isSocialOrderShow ?\r\n                <SocialOrderCreateModal\r\n                    show={isSocialOrderShow}\r\n                    religions={religionOptions}\r\n                    newdata={createSocialOrder}\r\n                    isCreate={isCreateSocialOrder}\r\n                    onHide={() => setSocialOrderShow(false)}\r\n                />\r\n                : null}\r\n\r\n            {/* Country create modal */}\r\n            {isCountryShow ?\r\n                <CountryCreateModal\r\n                    show={isCountryShow}\r\n                    newdata={createCountry}\r\n                    isCreate={isCountryCreate}\r\n                    onHide={() => setCountryShow(false)}\r\n                />\r\n                : null}\r\n\r\n            {/* Language create modal  */}\r\n            {isLanguageShow ?\r\n                <LanguageCreateModal\r\n                    show={isLanguageShow}\r\n                    newdata={createLanguage}\r\n                    isCreate={isLanguageCreated}\r\n                    onHide={() => setLanguageShow(false)}\r\n                />\r\n                : null}\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Edit;\r\n\r\nconst customStyles = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        height: 42,\r\n        fontSize: 14,\r\n        color: '#000',\r\n        boxShadow: 'none', '&:hover': { borderColor: '1px solid #ced4da' },\r\n        border: state.isFocused ? '1px solid #dfdfdf' : '1px solid #ced4da',\r\n        borderRadius: 0\r\n    }),\r\n    smBtn: {\r\n        width: 33,\r\n        height: 34,\r\n    }\r\n}","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\utils\\Images.js",[],"C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\utils\\api.js",[],"C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\modal\\Branch.js",[],"C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\modal\\Religion.js",[],"C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\modal\\SocialOrder.js",[],"C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\modal\\Language.js",[],"C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\forms\\ProfilePictureDescription.js",["90"],"import React, { useState } from 'react'\r\nimport './style.scss'\r\nimport CKEditor from 'ckeditor4-react'\r\nimport { Images } from '../../utils/Images'\r\n\r\nconst ProfilePictureDescription = ({ email }) => {\r\n    const [isImage, setImage] = useState()\r\n    const [isUpload, setUpload] = useState(false)\r\n    const [isLoading, setLoading] = useState(false)\r\n    const [previewURL, setPreviewURL] = useState(null)\r\n    const [description, setDescription] = useState({ value: null, error: null })\r\n\r\n    // Image onChange\r\n    const imageChangeHandeller = async (event) => {\r\n        try {\r\n            setUpload(true)\r\n            // let file = event.target.files[0]\r\n            setPreviewURL(URL.createObjectURL(event.target.files[0]))\r\n            // let formData = new FormData()\r\n            // formData.append('image', file)\r\n        } catch (error) {\r\n            if (error) {\r\n                console.log(error.response)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // Submit form\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        // Check description null or not\r\n        if (description.value === null || description.value === \"\") return setDescription({ error: true })\r\n\r\n        const data = {\r\n            email: email,\r\n            description: description.value\r\n        }\r\n\r\n        setLoading(true)\r\n        console.log(data)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card my-lg-4\">\r\n                <div className=\"card-body p-4\">\r\n                    <form onSubmit={handleSubmit}>\r\n                        <div className=\"row\">\r\n                            {/* Profile Picture */}\r\n                            <div className=\"col-12 col-lg-4 text-center py-4 pt-lg-5\">\r\n                                {/* Image Container */}\r\n                                <div className=\"img-container text-center\">\r\n                                    <div className=\"image rounded-circle border\">\r\n                                        {previewURL ?\r\n                                            <img src={previewURL} className=\"img-fluid\" alt=\"...\" />\r\n                                            : isImage ?\r\n                                                <img src={isImage} className=\"img-fluid\" alt=\"...\" />\r\n                                                : <img src={Images.Blank} className=\"img-fluid\" alt=\"...\" />}\r\n                                        <div className=\"overlay\">\r\n                                            <div className=\"flex-center flex-column\">\r\n                                                <input type=\"file\" className=\"upload\" onChange={imageChangeHandeller} />\r\n                                                {isUpload ?\r\n                                                    <p className=\"mb-0\">Uploading...</p>\r\n                                                    : <p className=\"mb-0\">Change <br /> Picture</p>\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Short Description */}\r\n                            <div className=\"col-12 col-lg-8\">\r\n                                {description.error ? <p className=\"text-danger\">Short description is required.</p> : <p>Short description.</p>}\r\n                                <CKEditor\r\n                                    data={description.value ? description.value : \"Write about of you\"}\r\n                                    onReady={editor => editor}\r\n                                    onChange={evt => setDescription({ value: evt.editor.getData(), error: null })}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Submit button */}\r\n                        <div className=\"text-right pt-3\">\r\n                            <button\r\n                                type=\"submit\"\r\n                                className=\"btn shadow-none\"\r\n                                disabled={isLoading}\r\n                            >\r\n                                {isLoading ? <span>Adding...</span> : <span>Add Description</span>}\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfilePictureDescription;","C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\forms\\ContactInformation.js",[],"C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\forms\\BasicAndLifestyle.js",[],"C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\forms\\Hobbi.js",[],"C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\forms\\Interests.js",[],"C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\modal\\Country.js",[],"C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\forms\\FavouriteMusic.js",[],"C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\modal\\Hobbi.js",[],"C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\modal\\Music.js",[],"C:\\CB\\COLOURBANGLA\\tmm_user_reg_app\\src\\components\\modal\\Interest.js",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":26,"column":8,"nodeType":"97","endLine":26,"endColumn":14,"suggestions":"98"},{"ruleId":"99","severity":1,"message":"100","line":31,"column":22,"nodeType":"101","messageId":"102","endLine":31,"endColumn":31},{"ruleId":"99","severity":1,"message":"103","line":7,"column":21,"nodeType":"101","messageId":"102","endLine":7,"endColumn":29},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchUsers'. Either include it or remove the dependency array.","ArrayExpression",["106"],"no-unused-vars","'setUpdate' is assigned a value but never used.","Identifier","unusedVar","'setImage' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},"Update the dependencies array to be: [fetchUsers, page]",{"range":"109","text":"110"},[940,946],"[fetchUsers, page]"]